[{"C:\\JS-Projects\\match-up-memory-game\\src\\index.js":"1","C:\\JS-Projects\\match-up-memory-game\\src\\App.js":"2","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Rules.js":"3","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Game.js":"4","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Board.js":"5","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\StatusBar.js":"6","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Card.js":"7"},{"size":535,"mtime":1611860930282,"results":"8","hashOfConfig":"9"},{"size":2619,"mtime":1611811552234,"results":"10","hashOfConfig":"9"},{"size":1818,"mtime":1611775351529,"results":"11","hashOfConfig":"9"},{"size":1020,"mtime":1611775397763,"results":"12","hashOfConfig":"9"},{"size":5644,"mtime":1611861359587,"results":"13","hashOfConfig":"9"},{"size":592,"mtime":1611858469009,"results":"14","hashOfConfig":"9"},{"size":417,"mtime":1611855002781,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"p04uuo",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\JS-Projects\\match-up-memory-game\\src\\index.js",[],["34","35"],"C:\\JS-Projects\\match-up-memory-game\\src\\App.js",["36"],"import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport './App.css';\n\nimport Rules from \"./Components/Rules\";\nimport Game from \"./Components/Game\";\n\nimport card0 from \"./images/card0.png\";\nimport card1 from \"./images/card1.png\";\nimport card2 from \"./images/card2.png\";\nimport card3 from \"./images/card3.png\";\nimport card4 from \"./images/card4.png\";\nimport card5 from \"./images/card5.png\";\nimport card6 from \"./images/card6.png\";\nimport card7 from \"./images/card7.png\";\nimport card8 from \"./images/card8.png\";\nimport card9 from \"./images/card9.png\";\nimport card10 from \"./images/card10.png\";\n\n\nfunction App() {\n  const cardImages = [card0, card1, card2, card3, card4, card5, card6, card7, card8, card9, card10];\n\n  const [deckSize, setDeckSize] = React.useState({ current: 6 });\n  const [deck, setDeck] = React.useState(() => {\n    return shuffle(Array(deckSize.current).fill(null).map((elem, index) => {\n      const card = {\n        id: index + 1,\n        type: Math.ceil((index + 1) / 2),\n        image: cardImages[Math.ceil((index + 1) / 2)],\n        facedownImage: card0,\n        state: \"facedown\"\n      };\n      return card;\n    }));\n  });\n\n\n  function buildDeck() {\n    const realDeck = Array(deckSize.current).fill(null).map((elem, index) => {\n      const card = {\n        id: index + 1,\n        type: Math.ceil((index + 1) / 2),\n        image: cardImages[Math.ceil((index + 1) / 2)],\n        facedownImage: cardImages[0],\n        state: \"facedown\"\n      };\n      return card;\n    });\n    setDeck(shuffle(realDeck));\n  }\n\n  function shuffle(arr) {\n    function replaceCard(array, from, to) {\n      const card = array.splice(from, 1);\n      array.splice(to, 0, card[0]);\n      return array;\n    };\n\n    const length = arr.length;\n    let tempArr = arr;\n    for (let i = 0; i < length * 2; i++) {\n      const random1 = Math.floor(Math.random() * length);\n      const random2 = Math.floor(Math.random() * length);\n      tempArr = replaceCard(tempArr, random1, random2);\n    }\n    return tempArr;\n  };\n\n  React.useEffect(() => {\n    buildDeck();\n  }, [deckSize]);\n\n  return (\n    <Router>\n      <div className=\"main-div\">\n        <Switch>\n          <Redirect from=\"/\" to=\"/rules\" exact strict />\n          <Route path=\"/rules\" exact strict render={() => <Rules startNewGame={size => setDeckSize({ current: Number(size) })}/>} />\n          <Route path=\"/game\" exact strict render={() => <Game deck={deck} startNewGame={size => setDeckSize({ current: Number(size) })}/>} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Rules.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Game.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Board.js",["37","38"],"import React from \"react\";\r\n\r\nimport StatusBar from \"./StatusBar\";\r\nimport Card from \"./Card\";\r\n\r\n\r\n// includes main game logic\r\nexport default function Board({ deck }) {\r\n    const cardStates = {\r\n        facedown: \"facedown\",\r\n        revealed: \"revealed\",\r\n        found: \"found\"\r\n    };\r\n    const initRecordData = {\r\n        6: \"none\",\r\n        8: \"none\",\r\n        10: \"none\",\r\n        12: \"none\",\r\n        14: \"none\",\r\n        16: \"none\",\r\n        18: \"none\",\r\n        20: \"none\"\r\n    };\r\n\r\n    const [liveDeck, setLiveDeck] = React.useState(deck);\r\n    const [revealedCards, setRevealedCards] = React.useState([]);\r\n    const [victory, setVictory] = React.useState(false);\r\n    const [currentTries, setCurrentTries] = React.useState(0);\r\n    const [bestGame, setBestGame] = React.useState(() => {\r\n        const record = localStorage.getItem(\"matchUpGameRecords\");\r\n        if (record !== null) {\r\n            const parsedRecord = JSON.parse(record);\r\n            return parsedRecord[liveDeck.length.toString()];\r\n        } else {\r\n            localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            return \"none\";\r\n        }\r\n    });\r\n\r\n\r\n    // main game logic. Progresses by a click on a card\r\n    function clickedCard(selectedCard) {\r\n        const newDeck = [...liveDeck]\r\n        const newRevealedCards = [...revealedCards];\r\n\r\n        if (newRevealedCards.length === 2) {\r\n            for (const card of newDeck) {\r\n                if (card.state === cardStates.revealed) {\r\n                    card.state = cardStates.facedown;\r\n                    setLiveDeck(newDeck);\r\n                    setRevealedCards([]);\r\n                }\r\n            }\r\n        } else {\r\n            for (const card of newDeck) {\r\n                if (card.id === selectedCard.id && card.state === cardStates.facedown) {\r\n                    card.state = cardStates.revealed;\r\n                    newRevealedCards.push(card);\r\n\r\n                    if (newRevealedCards.length === 2) {\r\n                        if (newRevealedCards[0].type === newRevealedCards[1].type) {\r\n                            let gameOver = true;\r\n                            for (const card of newDeck) {\r\n                                if (card.id === newRevealedCards[0].id || card.id === newRevealedCards[1].id) {\r\n                                    card.state = cardStates.found;\r\n                                }\r\n                            }\r\n                            for (const card of newDeck) {\r\n                                if (card.state !== cardStates.found) {\r\n                                    gameOver = false;\r\n                                }\r\n                            }\r\n\r\n                            if (gameOver) {\r\n                                setVictory(true);\r\n                            }\r\n                            setLiveDeck(newDeck);\r\n                            setRevealedCards([]);\r\n                            setCurrentTries(currentTries + 1);\r\n                        } else {\r\n                            setLiveDeck(newDeck);\r\n                            setRevealedCards(newRevealedCards);\r\n                            setCurrentTries(currentTries + 1);\r\n                        }\r\n                    } else {\r\n                        setLiveDeck(newDeck);\r\n                        setRevealedCards(newRevealedCards);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function renderBoard() {\r\n        const board = liveDeck.map(card =>\r\n            <Card\r\n                key={`key-${card.id}`}\r\n                card={card}\r\n                cardStates={cardStates}\r\n                clickedCard={card => clickedCard(card)}\r\n            />);\r\n        return board;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const record = localStorage.getItem(\"matchUpGameRecords\");\r\n        if (record !== null) {\r\n            const parsedRecord = JSON.parse(localStorage.getItem(\"matchUpGameRecords\"));\r\n            setBestGame(parsedRecord[deck.length.toString()]);\r\n        } else {\r\n            localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            setBestGame(\"none\");\r\n        }\r\n        \r\n        setLiveDeck(deck);\r\n        setRevealedCards([]);\r\n        setVictory(false);\r\n        setCurrentTries(0);\r\n    }, [deck]);\r\n\r\n    React.useEffect(() => {\r\n        if (victory) {\r\n            const record = localStorage.getItem(\"matchUpGameRecords\");\r\n            if (record !== null) {\r\n                const parsedRecord = JSON.parse(localStorage.getItem(\"matchUpGameRecords\"));\r\n                if (parsedRecord[liveDeck.length.toString()] === \"none\") {\r\n                    parsedRecord[liveDeck.length.toString()] = currentTries;\r\n                    localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(parsedRecord));\r\n                    setBestGame(currentTries);\r\n                } else if (parsedRecord[liveDeck.length.toString()] > currentTries) {\r\n                    parsedRecord[liveDeck.length.toString()] = currentTries;\r\n                    localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(parsedRecord));\r\n                    setBestGame(currentTries);\r\n                }\r\n            } else {\r\n                localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            }\r\n        }\r\n    }, [victory]);\r\n\r\n    return (\r\n        <div className=\"board-extended-div\">\r\n            <StatusBar currentTries={currentTries} bestGame={bestGame} />\r\n            <div className=\"board-div\">\r\n                {renderBoard()}\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\StatusBar.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Card.js",[],["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":77,"column":6,"nodeType":"47","endLine":77,"endColumn":16,"suggestions":"48"},{"ruleId":"45","severity":1,"message":"49","line":119,"column":8,"nodeType":"47","endLine":119,"endColumn":14,"suggestions":"50"},{"ruleId":"45","severity":1,"message":"51","line":139,"column":8,"nodeType":"47","endLine":139,"endColumn":17,"suggestions":"52"},{"ruleId":"41","replacedBy":"53"},{"ruleId":"43","replacedBy":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'buildDeck'. Either include it or remove the dependency array.","ArrayExpression",["57"],"React Hook React.useEffect has a missing dependency: 'initRecordData'. Either include it or remove the dependency array.",["58"],"React Hook React.useEffect has missing dependencies: 'currentTries', 'initRecordData', and 'liveDeck.length'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setBestGame' needs the current value of 'currentTries'.",["59"],["55"],["56"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [buildDeck, deckSize]",{"range":"66","text":"67"},"Update the dependencies array to be: [deck, initRecordData]",{"range":"68","text":"69"},"Update the dependencies array to be: [currentTries, initRecordData, liveDeck.length, victory]",{"range":"70","text":"71"},[2124,2134],"[buildDeck, deckSize]",[4336,4342],"[deck, initRecordData]",[5375,5384],"[currentTries, initRecordData, liveDeck.length, victory]"]