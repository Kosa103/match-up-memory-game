[{"C:\\JS-Projects\\match-up-memory-game\\src\\index.js":"1","C:\\JS-Projects\\match-up-memory-game\\src\\App.js":"2","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Rules.js":"3","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Game.js":"4","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Board.js":"5","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\StatusBar.js":"6","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Card.js":"7","C:\\JS-Projects\\match-up-memory-game\\src\\CustomHooks\\useFirstChange.js":"8"},{"size":659,"mtime":1612010259959,"results":"9","hashOfConfig":"10"},{"size":3196,"mtime":1612011256034,"results":"11","hashOfConfig":"10"},{"size":3001,"mtime":1612034753273,"results":"12","hashOfConfig":"10"},{"size":2503,"mtime":1612032227790,"results":"13","hashOfConfig":"10"},{"size":7111,"mtime":1612023411061,"results":"14","hashOfConfig":"10"},{"size":744,"mtime":1612016537703,"results":"15","hashOfConfig":"10"},{"size":536,"mtime":1611994265859,"results":"16","hashOfConfig":"10"},{"size":241,"mtime":1612004967713,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"p04uuo",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\JS-Projects\\match-up-memory-game\\src\\index.js",[],["37","38"],"C:\\JS-Projects\\match-up-memory-game\\src\\App.js",["39"],"import React from \"react\";\nimport {\n  Redirect,\n  Route,\n  Switch,\n  useHistory\n} from 'react-router-dom';\nimport './App.css';\n\nimport Rules from \"./Components/Rules\";\nimport Game from \"./Components/Game\";\nimport useFirstChange from \"./CustomHooks/useFirstChange\";\n\nimport card0 from \"./images/card0.png\";\nimport card1 from \"./images/card1.png\";\nimport card2 from \"./images/card2.png\";\nimport card3 from \"./images/card3.png\";\nimport card4 from \"./images/card4.png\";\nimport card5 from \"./images/card5.png\";\nimport card6 from \"./images/card6.png\";\nimport card7 from \"./images/card7.png\";\nimport card8 from \"./images/card8.png\";\nimport card9 from \"./images/card9.png\";\nimport card10 from \"./images/card10.png\";\n\n\nfunction App() {\n  const cardImages = [card0, card1, card2, card3, card4, card5, card6, card7, card8, card9, card10];\n\n  const [deckSize, setDeckSize] = React.useState({ current: 6 });\n  const [deck, setDeck] = React.useState(() => {\n    return shuffle(Array(deckSize.current).fill(null).map((elem, index) => {\n      const card = {\n        id: index + 1,\n        type: Math.ceil((index + 1) / 2),\n        image: cardImages[Math.ceil((index + 1) / 2)],\n        facedownImage: card0,\n        state: \"facedown\"\n      };\n      return card;\n    }));\n  });\n\n  const firstChange = useFirstChange();\n  const history = useHistory();\n\n\n  function buildDeck() {\n    const realDeck = Array(deckSize.current).fill(null).map((elem, index) => {\n      const card = {\n        id: index + 1,\n        type: Math.ceil((index + 1) / 2),\n        image: cardImages[Math.ceil((index + 1) / 2)],\n        facedownImage: card0,\n        state: \"facedown\"\n      };\n      return card;\n    });\n    setDeck(shuffle(realDeck));\n  }\n\n  function shuffle(cards) {\n    function replaceCard(tempDeck, from, to) {\n      const card = tempDeck.splice(from, 1);\n      tempDeck.splice(to, 0, card[0]);\n      return tempDeck;\n    };\n\n    const length = cards.length;\n    let tempCards = cards;\n    for (let i = 0; i < length * 2; i++) {\n      const random1 = Math.floor(Math.random() * length);\n      const random2 = Math.floor(Math.random() * length);\n      tempCards = replaceCard(tempCards, random1, random2);\n    }\n    return tempCards;\n  };\n\n  function startNewGameRedirect(size, newPath) {\n    sessionStorage.removeItem(\"matchUpSaveGame\");\n    history.push(newPath);\n    setDeckSize({ current: Number(size) });\n  }\n\n  function startNewGame(size) {\n    sessionStorage.removeItem(\"matchUpSaveGame\");\n    setDeckSize({ current: Number(size) });\n  }\n\n  React.useEffect(() => {\n    if (!firstChange) {\n      buildDeck();\n    }\n  }, [deckSize]);\n\n  return (\n    <div className=\"main-div\">\n      <Switch>\n        <Redirect from=\"/\" to=\"/rules\" exact strict />\n        <Route path=\"/rules\" exact strict render={() => \n          <Rules \n            startNewGame={(size, newPath) => startNewGameRedirect(size, newPath)} \n          />} \n        />\n        <Route path=\"/game\" exact strict render={() => \n          <Game \n            deck={deck}\n            startNewGame={size => startNewGame(size)} \n            restartGame={size => startNewGame(size)}\n          />} \n        />\n      </Switch>\n    </div>\n  );\n}\n\n\nexport default App;\n","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Rules.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Game.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Board.js",["40","41"],"import React from \"react\";\r\n\r\nimport StatusBar from \"./StatusBar\";\r\nimport Card from \"./Card\";\r\n\r\n\r\n// includes main game logic\r\nexport default function Board({ deck, restartGame }) {\r\n    const cardStates = {\r\n        facedown: \"facedown\",\r\n        revealed: \"revealed\",\r\n        found: \"found\"\r\n    };\r\n    const initRecordData = {\r\n        6: \"none\",\r\n        8: \"none\",\r\n        10: \"none\",\r\n        12: \"none\",\r\n        14: \"none\",\r\n        16: \"none\",\r\n        18: \"none\",\r\n        20: \"none\"\r\n    };\r\n\r\n    const [liveDeck, setLiveDeck] = React.useState(deck);\r\n    const [revealedCards, setRevealedCards] = React.useState([]);\r\n    const [victory, setVictory] = React.useState(false);\r\n    const [currentTries, setCurrentTries] = React.useState(0);\r\n    const [bestGame, setBestGame] = React.useState(() => {\r\n        const record = localStorage.getItem(\"matchUpGameRecords\");\r\n        if (record !== null) {\r\n            const parsedRecord = JSON.parse(record);\r\n            return parsedRecord[liveDeck.length.toString()];\r\n        } else {\r\n            localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            return \"none\";\r\n        }\r\n    });\r\n\r\n\r\n    // main game logic. Progresses by a click on a card\r\n    function clickedCard(selectedCard) {\r\n        const newDeck = [...liveDeck]\r\n        const newRevealedCards = [...revealedCards];\r\n\r\n        if (newRevealedCards.length === 2) {\r\n            for (const card of newDeck) {\r\n                if (card.state === cardStates.revealed) {\r\n                    card.state = cardStates.facedown;\r\n                    saveGameState(newDeck, [], victory, currentTries, bestGame);\r\n                    setLiveDeck(newDeck);\r\n                    setRevealedCards([]);\r\n                }\r\n            }\r\n        } else {\r\n            for (const card of newDeck) {\r\n                if (card.id === selectedCard.id && card.state === cardStates.facedown) {\r\n                    card.state = cardStates.revealed;\r\n                    newRevealedCards.push(card);\r\n\r\n                    if (newRevealedCards.length === 2) {\r\n                        if (newRevealedCards[0].type === newRevealedCards[1].type) {\r\n                            let gameOver = true;\r\n                            for (const card of newDeck) {\r\n                                if (card.id === newRevealedCards[0].id || card.id === newRevealedCards[1].id) {\r\n                                    card.state = cardStates.found;\r\n                                }\r\n                            }\r\n                            for (const card of newDeck) {\r\n                                if (card.state !== cardStates.found) {\r\n                                    gameOver = false;\r\n                                }\r\n                            }\r\n\r\n                            if (gameOver) {\r\n                                setVictory(true);\r\n                            }\r\n                            saveGameState(newDeck, [], gameOver ? true : false, currentTries + 1, bestGame);\r\n                            setLiveDeck(newDeck);\r\n                            setRevealedCards([]);\r\n                            setCurrentTries(currentTries + 1);\r\n                        } else {\r\n                            saveGameState(newDeck, newRevealedCards, victory, currentTries + 1, bestGame);\r\n                            setLiveDeck(newDeck);\r\n                            setRevealedCards(newRevealedCards);\r\n                            setCurrentTries(currentTries + 1);\r\n                        }\r\n                    } else {\r\n                        saveGameState(newDeck, newRevealedCards, victory, currentTries, bestGame);\r\n                        setLiveDeck(newDeck);\r\n                        setRevealedCards(newRevealedCards);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function saveGameState(currentDeck, currentRevealedCards, currentVictory, currentSavedTries, currentBestGame) {\r\n        const gameState = {\r\n            liveDeck: currentDeck,\r\n            revealedCards: currentRevealedCards,\r\n            victory: currentVictory,\r\n            currentTries: currentSavedTries,\r\n            bestGame: currentBestGame\r\n        };\r\n        sessionStorage.setItem(\"matchUpSaveGame\", JSON.stringify(gameState));\r\n    }\r\n\r\n    function restartCommand() {\r\n        restartGame(liveDeck.length);\r\n    }\r\n\r\n    function renderBoard() {\r\n        const board = liveDeck.map(card =>\r\n            <Card\r\n                key={`key-${card.id}`}\r\n                card={card}\r\n                cardStates={cardStates}\r\n                clickedCard={card => clickedCard(card)}\r\n            />);\r\n        return board;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const record = localStorage.getItem(\"matchUpGameRecords\");\r\n        if (record !== null) {\r\n            const parsedRecord = JSON.parse(localStorage.getItem(\"matchUpGameRecords\"));\r\n            setBestGame(parsedRecord[deck.length.toString()]);\r\n        } else {\r\n            localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            setBestGame(\"none\");\r\n        }\r\n        \r\n        setLiveDeck(deck);\r\n        setRevealedCards([]);\r\n        setVictory(false);\r\n        setCurrentTries(0);\r\n    }, [deck]);\r\n\r\n    React.useEffect(() => {\r\n        if (victory) {\r\n            const record = localStorage.getItem(\"matchUpGameRecords\");\r\n            if (record !== null) {\r\n                const parsedRecord = JSON.parse(localStorage.getItem(\"matchUpGameRecords\"));\r\n                if (parsedRecord[liveDeck.length.toString()] === \"none\") {\r\n                    parsedRecord[liveDeck.length.toString()] = currentTries;\r\n                    localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(parsedRecord));\r\n                    setBestGame(currentTries);\r\n                } else if (parsedRecord[liveDeck.length.toString()] > currentTries) {\r\n                    parsedRecord[liveDeck.length.toString()] = currentTries;\r\n                    localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(parsedRecord));\r\n                    setBestGame(currentTries);\r\n                }\r\n            } else {\r\n                localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            }\r\n        }\r\n    }, [victory]);\r\n\r\n    React.useEffect(() => {\r\n        const saveGame = sessionStorage.getItem(\"matchUpSaveGame\");\r\n        if (saveGame) {\r\n            const parsedSaveGame = JSON.parse(saveGame);\r\n            setLiveDeck(parsedSaveGame.liveDeck);\r\n            setRevealedCards(parsedSaveGame.revealedCards);\r\n            setVictory(parsedSaveGame.victory);\r\n            setCurrentTries(parsedSaveGame.currentTries);\r\n            setBestGame(parsedSaveGame.bestGame);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"board-extended-div\">\r\n            <StatusBar currentTries={currentTries} bestGame={bestGame} restartCommand={() => restartCommand()} />\r\n            <div className=\"board-div\">\r\n                {renderBoard()}\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\StatusBar.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Card.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\CustomHooks\\useFirstChange.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":94,"column":6,"nodeType":"48","endLine":94,"endColumn":16,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":138,"column":8,"nodeType":"48","endLine":138,"endColumn":14,"suggestions":"51"},{"ruleId":"46","severity":1,"message":"52","line":158,"column":8,"nodeType":"48","endLine":158,"endColumn":17,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'buildDeck' and 'firstChange'. Either include them or remove the dependency array.","ArrayExpression",["56"],"React Hook React.useEffect has a missing dependency: 'initRecordData'. Either include it or remove the dependency array.",["57"],"React Hook React.useEffect has missing dependencies: 'currentTries', 'initRecordData', and 'liveDeck.length'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setBestGame' needs the current value of 'currentTries'.",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},"Update the dependencies array to be: [buildDeck, deckSize, firstChange]",{"range":"65","text":"66"},"Update the dependencies array to be: [deck, initRecordData]",{"range":"67","text":"68"},"Update the dependencies array to be: [currentTries, initRecordData, liveDeck.length, victory]",{"range":"69","text":"70"},[2599,2609],"[buildDeck, deckSize, firstChange]",[5285,5291],"[deck, initRecordData]",[6324,6333],"[currentTries, initRecordData, liveDeck.length, victory]"]