[{"C:\\JS-Projects\\match-up-memory-game\\src\\index.js":"1","C:\\JS-Projects\\match-up-memory-game\\src\\App.js":"2","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Rules.js":"3","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Game.js":"4","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Board.js":"5","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\StatusBar.js":"6","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Card.js":"7","C:\\JS-Projects\\match-up-memory-game\\src\\CustomHooks\\useFirstChange.js":"8"},{"size":659,"mtime":1612010259959,"results":"9","hashOfConfig":"10"},{"size":3197,"mtime":1612080905850,"results":"11","hashOfConfig":"10"},{"size":3019,"mtime":1612080897047,"results":"12","hashOfConfig":"10"},{"size":2521,"mtime":1612080899576,"results":"13","hashOfConfig":"10"},{"size":7111,"mtime":1612023411061,"results":"14","hashOfConfig":"10"},{"size":744,"mtime":1612016537703,"results":"15","hashOfConfig":"10"},{"size":536,"mtime":1611994265859,"results":"16","hashOfConfig":"10"},{"size":241,"mtime":1612004967713,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"p04uuo",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\JS-Projects\\match-up-memory-game\\src\\index.js",[],["36","37"],"C:\\JS-Projects\\match-up-memory-game\\src\\App.js",["38"],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Rules.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Game.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Board.js",["39","40"],"import React from \"react\";\r\n\r\nimport StatusBar from \"./StatusBar\";\r\nimport Card from \"./Card\";\r\n\r\n\r\n// includes main game logic\r\nexport default function Board({ deck, restartGame }) {\r\n    const cardStates = {\r\n        facedown: \"facedown\",\r\n        revealed: \"revealed\",\r\n        found: \"found\"\r\n    };\r\n    const initRecordData = {\r\n        6: \"none\",\r\n        8: \"none\",\r\n        10: \"none\",\r\n        12: \"none\",\r\n        14: \"none\",\r\n        16: \"none\",\r\n        18: \"none\",\r\n        20: \"none\"\r\n    };\r\n\r\n    const [liveDeck, setLiveDeck] = React.useState(deck);\r\n    const [revealedCards, setRevealedCards] = React.useState([]);\r\n    const [victory, setVictory] = React.useState(false);\r\n    const [currentTries, setCurrentTries] = React.useState(0);\r\n    const [bestGame, setBestGame] = React.useState(() => {\r\n        const record = localStorage.getItem(\"matchUpGameRecords\");\r\n        if (record !== null) {\r\n            const parsedRecord = JSON.parse(record);\r\n            return parsedRecord[liveDeck.length.toString()];\r\n        } else {\r\n            localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            return \"none\";\r\n        }\r\n    });\r\n\r\n\r\n    // main game logic. Progresses by a click on a card\r\n    function clickedCard(selectedCard) {\r\n        const newDeck = [...liveDeck]\r\n        const newRevealedCards = [...revealedCards];\r\n\r\n        if (newRevealedCards.length === 2) {\r\n            for (const card of newDeck) {\r\n                if (card.state === cardStates.revealed) {\r\n                    card.state = cardStates.facedown;\r\n                    saveGameState(newDeck, [], victory, currentTries, bestGame);\r\n                    setLiveDeck(newDeck);\r\n                    setRevealedCards([]);\r\n                }\r\n            }\r\n        } else {\r\n            for (const card of newDeck) {\r\n                if (card.id === selectedCard.id && card.state === cardStates.facedown) {\r\n                    card.state = cardStates.revealed;\r\n                    newRevealedCards.push(card);\r\n\r\n                    if (newRevealedCards.length === 2) {\r\n                        if (newRevealedCards[0].type === newRevealedCards[1].type) {\r\n                            let gameOver = true;\r\n                            for (const card of newDeck) {\r\n                                if (card.id === newRevealedCards[0].id || card.id === newRevealedCards[1].id) {\r\n                                    card.state = cardStates.found;\r\n                                }\r\n                            }\r\n                            for (const card of newDeck) {\r\n                                if (card.state !== cardStates.found) {\r\n                                    gameOver = false;\r\n                                }\r\n                            }\r\n\r\n                            if (gameOver) {\r\n                                setVictory(true);\r\n                            }\r\n                            saveGameState(newDeck, [], gameOver ? true : false, currentTries + 1, bestGame);\r\n                            setLiveDeck(newDeck);\r\n                            setRevealedCards([]);\r\n                            setCurrentTries(currentTries + 1);\r\n                        } else {\r\n                            saveGameState(newDeck, newRevealedCards, victory, currentTries + 1, bestGame);\r\n                            setLiveDeck(newDeck);\r\n                            setRevealedCards(newRevealedCards);\r\n                            setCurrentTries(currentTries + 1);\r\n                        }\r\n                    } else {\r\n                        saveGameState(newDeck, newRevealedCards, victory, currentTries, bestGame);\r\n                        setLiveDeck(newDeck);\r\n                        setRevealedCards(newRevealedCards);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function saveGameState(currentDeck, currentRevealedCards, currentVictory, currentSavedTries, currentBestGame) {\r\n        const gameState = {\r\n            liveDeck: currentDeck,\r\n            revealedCards: currentRevealedCards,\r\n            victory: currentVictory,\r\n            currentTries: currentSavedTries,\r\n            bestGame: currentBestGame\r\n        };\r\n        sessionStorage.setItem(\"matchUpSaveGame\", JSON.stringify(gameState));\r\n    }\r\n\r\n    function restartCommand() {\r\n        restartGame(liveDeck.length);\r\n    }\r\n\r\n    function renderBoard() {\r\n        const board = liveDeck.map(card =>\r\n            <Card\r\n                key={`key-${card.id}`}\r\n                card={card}\r\n                cardStates={cardStates}\r\n                clickedCard={card => clickedCard(card)}\r\n            />);\r\n        return board;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const record = localStorage.getItem(\"matchUpGameRecords\");\r\n        if (record !== null) {\r\n            const parsedRecord = JSON.parse(localStorage.getItem(\"matchUpGameRecords\"));\r\n            setBestGame(parsedRecord[deck.length.toString()]);\r\n        } else {\r\n            localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            setBestGame(\"none\");\r\n        }\r\n        \r\n        setLiveDeck(deck);\r\n        setRevealedCards([]);\r\n        setVictory(false);\r\n        setCurrentTries(0);\r\n    }, [deck]);\r\n\r\n    React.useEffect(() => {\r\n        if (victory) {\r\n            const record = localStorage.getItem(\"matchUpGameRecords\");\r\n            if (record !== null) {\r\n                const parsedRecord = JSON.parse(localStorage.getItem(\"matchUpGameRecords\"));\r\n                if (parsedRecord[liveDeck.length.toString()] === \"none\") {\r\n                    parsedRecord[liveDeck.length.toString()] = currentTries;\r\n                    localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(parsedRecord));\r\n                    setBestGame(currentTries);\r\n                } else if (parsedRecord[liveDeck.length.toString()] > currentTries) {\r\n                    parsedRecord[liveDeck.length.toString()] = currentTries;\r\n                    localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(parsedRecord));\r\n                    setBestGame(currentTries);\r\n                }\r\n            } else {\r\n                localStorage.setItem(\"matchUpGameRecords\", JSON.stringify(initRecordData));\r\n            }\r\n        }\r\n    }, [victory]);\r\n\r\n    React.useEffect(() => {\r\n        const saveGame = sessionStorage.getItem(\"matchUpSaveGame\");\r\n        if (saveGame) {\r\n            const parsedSaveGame = JSON.parse(saveGame);\r\n            setLiveDeck(parsedSaveGame.liveDeck);\r\n            setRevealedCards(parsedSaveGame.revealedCards);\r\n            setVictory(parsedSaveGame.victory);\r\n            setCurrentTries(parsedSaveGame.currentTries);\r\n            setBestGame(parsedSaveGame.bestGame);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"board-extended-div\">\r\n            <StatusBar currentTries={currentTries} bestGame={bestGame} restartCommand={() => restartCommand()} />\r\n            <div className=\"board-div\">\r\n                {renderBoard()}\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\JS-Projects\\match-up-memory-game\\src\\Components\\StatusBar.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\Components\\Card.js",[],"C:\\JS-Projects\\match-up-memory-game\\src\\CustomHooks\\useFirstChange.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":94,"column":6,"nodeType":"47","endLine":94,"endColumn":16,"suggestions":"48"},{"ruleId":"45","severity":1,"message":"49","line":138,"column":8,"nodeType":"47","endLine":138,"endColumn":14,"suggestions":"50"},{"ruleId":"45","severity":1,"message":"51","line":158,"column":8,"nodeType":"47","endLine":158,"endColumn":17,"suggestions":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'buildDeck' and 'firstChange'. Either include them or remove the dependency array.","ArrayExpression",["55"],"React Hook React.useEffect has a missing dependency: 'initRecordData'. Either include it or remove the dependency array.",["56"],"React Hook React.useEffect has missing dependencies: 'currentTries', 'initRecordData', and 'liveDeck.length'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setBestGame' needs the current value of 'currentTries'.",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [buildDeck, deckSize, firstChange]",{"range":"64","text":"65"},"Update the dependencies array to be: [deck, initRecordData]",{"range":"66","text":"67"},"Update the dependencies array to be: [currentTries, initRecordData, liveDeck.length, victory]",{"range":"68","text":"69"},[2600,2610],"[buildDeck, deckSize, firstChange]",[5285,5291],"[deck, initRecordData]",[6324,6333],"[currentTries, initRecordData, liveDeck.length, victory]"]